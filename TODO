
Test Scenarios
--------------

- Wildcard subscriptions (like activemq)
- Exclusive consumer support (like activemq)
- When StompServer detects client disconnect, remove from all subscriptions
- Synchronous call semantics
      - "client" sends message with "reply-to" header that's: "reply-" + uuid
      - broker stores association between reply-to and client session_id
      - "server" receives message, does work, and sends message to "reply-to"
        destination
      - broker synchronously sends message to the subscriber and removes the
        reply-to / session_id association in memory
- Config file parser
   - Map dest_name prefixes to destination types and options
   - port
- Command line script to start server
   - optionally accepts config file path
   - if no config file, run with default options
- Command line management script
   - list destinations and # of messages in each
   - list subscribers and what destinations they're listening to
   - delete destination
- Test receipts
  - on send
  - on subscribe
  - on unsubscribe
  - on ack
- Add error checking
  - Missing destination on SEND, SUBSCRIBE, UNSUBSCRIBE
  - Missing message-id on ACK
  - Invalid message-id on ACK (e.g. can't parse dest_name)
  - Missing body on SEND
- Add proper logging
  - Config file support to change log levels, log file rotation, etc


Feature Roadmap
---------------

- Memory only queue support
- Check this out. We may be able to borrow ideas from this:
   - http://www.amqp.org/confluence/display/AMQP/1-0+Testing+Suite
   - not sure how many of those scenarios we can pass w/o tons of work
- Configurable handling of unacked messages
   - Requeue (current implementation)
   - Put in dead letter queue
   - Delete
- STOMP transaction support
- STOMP character encoding header support
  - IMHO an odd feature.  currently we treat all message bodies as byte streams,
    so encoding isn't important to us
- Message replication
- Modify binary file formats to include a file version header
   - Useful if we want to rev the format later. could detect old bin files and
     rev them at startup.
- Optional compression of message bodies (zlib.compress())

